/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import Classdoc.DBConnection;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RectangleInsets;

/**
 *
 * @author Neeraj
 */
public class StatsPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatsPanel
     */
    public StatsPanel(String user,Dimension dim) {
        this();
        this.user = user;
        this.setSize(dim);
    }

    public StatsPanel() {
        initComponents();
        //   DateTimeFormatter df=new DateTimeFormatter.ofPattern("yyyy-mm-dd");
        Calendar c = Calendar.getInstance();
        date(c.get(Calendar.MONTH));
        DefaultCategoryDataset d = new DefaultCategoryDataset();

        for (int i = 0; i <= c.get(Calendar.MONTH); i++) {
            d.setValue(comm[i], "profit", month[i]);
        }
        /*
        JFreeChart chart=ChartFactory.createBarChart("student score", "Student name", "marks", d, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p=chart.getCategoryPlot();
        p.setRangeCrosshairPaint(Color.BLUE);
        //p.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame=new ChartFrame("Bar Chart for students",chart);
        frame.setVisible(true);
        frame.setSize(450,350);
         */
         p = makePieChart(d);
        p.setVisible(true);
        p.setSize(1050, 500);
        p.setLocation(20, 60);
        this.add(p);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cb = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monthly", "User" }));
        cb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItemStateChanged(evt);
            }
        });

        jButton1.setText("Close Tab");
        jButton1.setBackground(new java.awt.Color(54, 33, 89));
        jButton1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 646, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(570, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
String user, sql;
    Connection con;
    ResultSet rs;
    Statement st;
    String month[] = new String[]{"january", "febuary", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"};
    double comm[] = new double[12];
    JPanel p;
    private void cbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbItemStateChanged
        // TODO add your handling code here:
        if (cb.getSelectedItem().toString().equals("Monthly")) {
            p.setVisible(false);
            Calendar c = Calendar.getInstance();
            date(c.get(Calendar.MONTH));
            DefaultCategoryDataset d = new DefaultCategoryDataset();
            for (int i = 0; i <= c.get(Calendar.MONTH); i++) {
                d.setValue(comm[i], "Commission", month[i]);
            }
            p.removeAll();
           
            p = makePieChart(d);
        p.setVisible(true);
        p.setSize(1050, 500);
        p.setLocation(20, 60);
        this.add(p);
        }
        else
        {  
            // jPanel1.setVisible(true);
            p.setVisible(false);
            DefaultCategoryDataset d = new DefaultCategoryDataset();
            ArrayList<String> arr=new ArrayList<>();
            ArrayList<Integer> comm=new ArrayList<>();
            arr=user();
            for(int i=0;i<arr.size();i++)
            {
                sql=String.format("select sum(commission) from payment where user='%s' ", arr.get(i));
                try{
                    ResultSet rs=DBConnection.executeQuery(sql);
                    if(rs.next())
                    {
                        comm.add(rs.getInt("sum(commission)"));
                    }
                    d.setValue(comm.get(i), "Commission", arr.get(i));
                    System.out.println("stats usre"+arr.get(i));
                }
                catch(SQLException e)
                {
                    System.out.println(e);
                }
                
            }
          //  p.removeAll();
            p = makePieChart(d);
        p.setVisible(true);
        p.setSize(1050, 500);
        p.setLocation(20, 60);
        this.add(p);
        }
    }//GEN-LAST:event_cbItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
public JPanel makePieChart(DefaultCategoryDataset d) {
        String fontName = "Lucida Sans";
        JFreeChart chart = ChartFactory.createBarChart(null, "", "", d, PlotOrientation.VERTICAL, false, true, false);

        StandardChartTheme theme = (StandardChartTheme) org.jfree.chart.StandardChartTheme.createJFreeTheme();

        theme.setTitlePaint(Color.decode("#4572a7"));
        theme.setExtraLargeFont(new Font(fontName, Font.PLAIN, 16)); //title
        theme.setLargeFont(new Font(fontName, Font.BOLD, 15)); //axis-title
        theme.setRegularFont(new Font(fontName, Font.PLAIN, 11));
        theme.setRangeGridlinePaint(Color.decode("#C0C0C0"));
        theme.setPlotBackgroundPaint(Color.white);
        theme.setChartBackgroundPaint(Color.white);
        theme.setGridBandPaint(Color.red);
        theme.setAxisOffset(new RectangleInsets(0, 0, 0, 0));
        theme.setBarPainter(new StandardBarPainter());
        theme.setAxisLabelPaint(Color.decode("#666666"));
        theme.apply(chart);
        chart.getCategoryPlot().setOutlineVisible(false);
        chart.getCategoryPlot().getRangeAxis().setAxisLineVisible(false);
        chart.getCategoryPlot().getRangeAxis().setTickMarksVisible(false);
        chart.getCategoryPlot().setRangeGridlineStroke(new BasicStroke());
        chart.getCategoryPlot().getRangeAxis().setTickLabelPaint(Color.decode("#666666"));
        chart.getCategoryPlot().getDomainAxis().setTickLabelPaint(Color.decode("#666666"));
        chart.setTextAntiAlias(true);
        chart.setAntiAlias(true);
        chart.getCategoryPlot().getRenderer().setSeriesPaint(0, Color.decode("#4572a7"));
        BarRenderer rend = (BarRenderer) chart.getCategoryPlot().getRenderer();
        rend.setShadowVisible(true);
        rend.setShadowXOffset(2);
        rend.setShadowYOffset(0);
        rend.setShadowPaint(Color.decode("#C0C0C0"));
        rend.setMaximumBarWidth(0.06);
        return new ChartPanel(chart);
        /*
    ChartFrame frame=new ChartFrame("Bar Chart for students",chart);
        frame.setVisible(true);
        frame.setSize(450,350);
        return (JPanel)frame;
         */
    }

    public void date(int m) {
        System.out.println("" + month);

        for (int i = 0; i <= m; i++) {
            try {
                sql = "Select sum(commission) from payment where monthname(invoicedate)='" + month[i] + "'  ";  //t1 and t2 are dates
                System.out.println("" + sql);
                rs = DBConnection.executeQuery(sql);
                while (rs.next()) {
                    comm[i] = rs.getDouble("sum(commission)");
                }
            } catch (Exception ex) {
                System.out.println("" + ex.getMessage());
            }
        }
    }
    public ArrayList<String> user()
    {
        ArrayList<String> arr=new ArrayList<>();
        String sql=String.format("select name from users");
        try{
        ResultSet rs=DBConnection.executeQuery(sql);
        while(rs.next())
        {
          System.out.println("user =="+arr.add(rs.getString("name")));
        }
        }
        catch(SQLException e)
        {
            System.out.println(e.getMessage());
        }
        return arr;
    }
}
